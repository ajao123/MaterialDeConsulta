Parte 1 - Lendo e Escrevendo em Arquivos

	pubspec.yaml:

		dependencies:
		  flutter:
		    sdk: flutter

		  # The following adds the Cupertino Icons font to your application.
		  # Use with the CupertinoIcons class for iOS style icons.
		  cupertino_icons: ^0.1.2
		  path_provider: "^0.4.1"

	main.dart:

		import 'dart:convert';
		import 'dart:io';

		import 'package:flutter/material.dart';
		import 'package:path_provider/path_provider.dart';

			void main(){
			  runApp(MaterialApp(
			    home: home(),
			  ));
			}

			class home extends StatefulWidget {
			  @override
			  _homeState createState() => _homeState();
			}

			class _homeState extends State<home> {

			  List _toDoList = [];

			  @override
			  Widget build(BuildContext context) {
			    return Container();
			  }

			  Future<File> _getFile() async {
			    final directory = await getApplicationDocumentsDirectory();
			    return File("${directory.path}/data.json");
			  }

			  Future<File> _saveData() async{
			    String data = json.encode(_toDoList);
			    final file = await _getFile();
			    return file.writeAsString(data);
			  }

			  Future<String> _readData() async{
			    try{
			      final file = await _getFile();

			      return file.readAsString();
			    }catch(e){
			      return null;
			    }
			  }
			}

Parte 2 - Iniciando Layout 

	import 'dart:convert';
	import 'dart:io';

	import 'package:flutter/material.dart';
	import 'package:path_provider/path_provider.dart';

		void main(){
		  runApp(MaterialApp(
		    home: home(),
		  ));
		}

		class home extends StatefulWidget {
		  @override
		  _homeState createState() => _homeState();
		}

		class _homeState extends State<home> {

		  List _toDoList = [];

		  @override
		  Widget build(BuildContext context) {
		    return Scaffold(
		      appBar: AppBar(
		        title: Text("Lista de Tarefas"),
		        backgroundColor: Colors.blueAccent,
		        centerTitle: true,
		      ),  //AppBar
		      body: Column(
		        children: <Widget>[
		          Container(
		            padding: EdgeInsets.fromLTRB(17.0, 1.0, 7.0, 1.0),
		            child: Row(
		              children: <Widget>[
		                  Expanded(
		                    child: TextField(
		                        decoration: InputDecoration(
		                          labelText: "Nova Tarefa",
		                          labelStyle: TextStyle(color: Colors.blueAccent),
		                        )
		                    ),
		                  ),
		                  RaisedButton(
		                    color: Colors.blueAccent,
		                    child: Text("ADD"),
		                    textColor: Colors.white,
		                    onPressed: (){},
		                  ),
		              ],
		            ),
		          )
		        ],
		      ),//Column
		    );  //Scaffold
		  }

		  Future<File> _getFile() async {
		    final directory = await getApplicationDocumentsDirectory();
		    return File("${directory.path}/data.json");
		  }

		  Future<File> _saveData() async{
		    String data = json.encode(_toDoList);
		    final file = await _getFile();
		    return file.writeAsString(data);
		  }

		  Future<String> _readData() async{
		    try{
		      final file = await _getFile();

		      return file.readAsString();
		    }catch(e){
		      return null;
		    }
		  }


		}

Parte 3 - Criando Lista

	import 'dart:convert';
	import 'dart:io';

	import 'package:flutter/material.dart';
	import 'package:path_provider/path_provider.dart';

		void main(){
		  runApp(MaterialApp(
		    home: home(),
		  ));
		}

		class home extends StatefulWidget {
		  @override
		  _homeState createState() => _homeState();
		}

		class _homeState extends State<home> {

		  List _toDoList = ["a"];

		  @override
		  Widget build(BuildContext context) {
		    return Scaffold(
		      appBar: AppBar(
		        title: Text("Lista de Tarefas"),
		        backgroundColor: Colors.blueAccent,
		        centerTitle: true,
		      ),  //AppBar
		      body: Column(
		        children: <Widget>[
		          Container(
		            padding: EdgeInsets.fromLTRB(17.0, 1.0, 7.0, 1.0),
		            child: Row(
		              children: <Widget>[
		                  Expanded(
		                    child: TextField(
		                        decoration: InputDecoration(
		                          labelText: "Nova Tarefa",
		                          labelStyle: TextStyle(color: Colors.blueAccent),
		                        )
		                    ),
		                  ),
		                  RaisedButton(
		                    color: Colors.blueAccent,
		                    child: Text("ADD"),
		                    textColor: Colors.white,
		                    onPressed: (){},
		                  ),
		              ],
		            ),
		          ),
		          Expanded(
		            child: ListView.builder(
		              padding: EdgeInsets.only(top: 10.0),
		              itemCount: _toDoList.length,
		              itemBuilder: (context, index){
		                return CheckboxListTile(
		                  title:Text(_toDoList[index]["title"]),
		                  value: _toDoList[index]["ok"],
		                  secondary: CircleAvatar(
		                    child: Icon(_toDoList[index]["ok"] ?
		                    Icons.check : Icons.error),
		                  ),
		                );
		              },
		            ),
		          )
		        ],
		      ),//Column
		    );  //Scaffold
		  }

		  Future<File> _getFile() async {
		    final directory = await getApplicationDocumentsDirectory();
		    return File("${directory.path}/data.json");
		  }

		  Future<File> _saveData() async{
		    String data = json.encode(_toDoList);
		    final file = await _getFile();
		    return file.writeAsString(data);
		  }

		  Future<String> _readData() async{
		    try{
		      final file = await _getFile();

		      return file.readAsString();
		    }catch(e){
		      return null;
		    }
		  }


		}

Parte 4 - Adicionando Itens na Lista e Lista de Tarefas

	import 'dart:convert';
	import 'dart:io';

	import 'package:flutter/material.dart';
	import 'package:path_provider/path_provider.dart';

		void main(){
		  runApp(MaterialApp(
		    home: home(),
		  ));
		}

		class home extends StatefulWidget {
		  @override
		  _homeState createState() => _homeState();
		}

		class _homeState extends State<home> {

		  List _toDoList = [];
		  final _toDoController = TextEditingController();

		  void _addToDo(){
		    setState(() {
		      Map<String, dynamic> _newToDo = Map();
		      _newToDo["title"] = _toDoController.text;
		      _toDoController.text = "";
		      _newToDo["ok"] = false;
		      _toDoList.add(_newToDo);
		    });
		  }

		  @override
		  Widget build(BuildContext context) {
		    return Scaffold(
		      appBar: AppBar(
		        title: Text("Lista de Tarefas"),
		        backgroundColor: Colors.blueAccent,
		        centerTitle: true,
		      ),  //AppBar
		      body: Column(
		        children: <Widget>[
		          Container(
		            padding: EdgeInsets.fromLTRB(17.0, 1.0, 7.0, 1.0),
		            child: Row(
		              children: <Widget>[
		                  Expanded(
		                    child: TextField(
		                        decoration: InputDecoration(
		                          labelText: "Nova Tarefa",
		                          labelStyle: TextStyle(color: Colors.blueAccent),
		                        ),
		                      controller: _toDoController,
		                    ),
		                  ),
		                  RaisedButton(
		                    color: Colors.blueAccent,
		                    child: Text("ADD"),
		                    textColor: Colors.white,
		                    onPressed: _addToDo,
		                  ),
		              ],
		            ),
		          ),
		          Expanded(
		            child: ListView.builder(
		              padding: EdgeInsets.only(top: 10.0),
		              itemCount: _toDoList.length,
		              itemBuilder: (context, index){
		                return CheckboxListTile(
		                  title:Text(_toDoList[index]["title"]),
		                  value: _toDoList[index]["ok"],
		                  secondary: CircleAvatar(
		                    child: Icon(_toDoList[index]["ok"] ?
		                    Icons.check : Icons.error),
		                  ),
		                  onChanged: (c){
		                    setState(() {
		                      _toDoList[index]["ok"]=c;
		                    });
		                  },
		                );
		              },
		            ),
		          )
		        ],
		      ),//Column
		    );  //Scaffold
		  }

		  Future<File> _getFile() async {
		    final directory = await getApplicationDocumentsDirectory();
		    return File("${directory.path}/data.json");
		  }

		  Future<File> _saveData() async{
		    String data = json.encode(_toDoList);
		    final file = await _getFile();
		    return file.writeAsString(data);
		  }

		  Future<String> _readData() async{
		    try{
		      final file = await _getFile();

		      return file.readAsString();
		    }catch(e){
		      return null;
		    }
		  }


		}

Parte 5 - Salvando Permanentemente e Itens RemovÃ­veis

	import 'dart:convert';
	import 'dart:io';

	import 'package:flutter/material.dart';
	import 'package:path_provider/path_provider.dart';

		void main(){
		  runApp(MaterialApp(
		    home: home(),
		  ));
		}

		class home extends StatefulWidget {
		  @override
		  _homeState createState() => _homeState();
		}

		class _homeState extends State<home> {

		  List _toDoList = [];
		  final _toDoController = TextEditingController();

		  void _addToDo(){
		    setState(() {
		      Map<String, dynamic> _newToDo = Map();
		      _newToDo["title"] = _toDoController.text;
		      _toDoController.text = "";
		      _newToDo["ok"] = false;
		      _toDoList.add(_newToDo);
		      _saveData();
		    });
		  }

		  @override
		  void initState() {
		    super.initState();
		    _readData().then((data){
		      setState(() {
		        _toDoList = json.decode(data);
		      });

		    });
		  }


		  @override
		  Widget build(BuildContext context) {
		    return Scaffold(
		      appBar: AppBar(
		        title: Text("Lista de Tarefas"),
		        backgroundColor: Colors.blueAccent,
		        centerTitle: true,
		      ),  //AppBar
		      body: Column(
		        children: <Widget>[
		          Container(
		            padding: EdgeInsets.fromLTRB(17.0, 1.0, 7.0, 1.0),
		            child: Row(
		              children: <Widget>[
		                  Expanded(
		                    child: TextField(
		                        decoration: InputDecoration(
		                          labelText: "Nova Tarefa",
		                          labelStyle: TextStyle(color: Colors.blueAccent),
		                        ),
		                      controller: _toDoController,
		                    ),
		                  ),
		                  RaisedButton(
		                    color: Colors.blueAccent,
		                    child: Text("ADD"),
		                    textColor: Colors.white,
		                    onPressed: _addToDo,
		                  ),
		              ],
		            ),
		          ),
		          Expanded(
		            child: ListView.builder(
		              padding: EdgeInsets.only(top: 10.0),
		              itemCount: _toDoList.length,
		              itemBuilder: buildItem,
		            ),
		          )
		        ],
		      ),//Column
		    );  //Scaffold
		  }

		  Widget buildItem(context, index){
		      return Dismissible(
		        key: Key(DateTime.now().millisecondsSinceEpoch.toString()),
		        background: Container(
		          color:Colors.red,
		          child: Align(
		            alignment: Alignment(-0.9, 0.0),
		            child: Icon(Icons.delete, color: Colors.white,),
		          ),
		        ),
		        direction: DismissDirection.startToEnd,
		        child: CheckboxListTile(
		          title:Text(_toDoList[index]["title"]),
		          value: _toDoList[index]["ok"],
		          secondary: CircleAvatar(
		            child: Icon(_toDoList[index]["ok"] ?
		            Icons.check : Icons.error),
		          ),
		          onChanged: (c){
		            setState(() {
		              _toDoList[index]["ok"]=c;
		              _saveData();
		            });
		          },
		        ),
		      );
		  }

		  Future<File> _getFile() async {
		    final directory = await getApplicationDocumentsDirectory();
		    return File("${directory.path}/data.json");
		  }

		  Future<File> _saveData() async{
		    String data = json.encode(_toDoList);
		    final file = await _getFile();
		    return file.writeAsString(data);
		  }

		  Future<String> _readData() async{
		    try{
		      final file = await _getFile();

		      return file.readAsString();
		    }catch(e){
		      return null;
		    }
		  }

		}

Parte 6 - SnackBar, Desfazendo AÃ§Ã£o e Ordenando Lista


	import 'dart:convert';
	import 'dart:io';

	import 'package:flutter/material.dart';
	import 'package:path_provider/path_provider.dart';

		void main(){
		  runApp(MaterialApp(
		    home: home(),
		  ));
		}

		class home extends StatefulWidget {
		  @override
		  _homeState createState() => _homeState();
		}

		class _homeState extends State<home> {

		  List _toDoList = [];
		  final _toDoController = TextEditingController();
		  Map<String, dynamic> _lastRemoved;
		  int _lastRemovedPos;

		  void _addToDo(){
		    setState(() {
		      Map<String, dynamic> _newToDo = Map();
		      _newToDo["title"] = _toDoController.text;
		      _toDoController.text = "";
		      _newToDo["ok"] = false;
		      _toDoList.add(_newToDo);
		      _saveData();
		    });
		  }

		  @override
		  void initState() {
		    super.initState();
		    _readData().then((data){
		      setState(() {
		        _toDoList = json.decode(data);
		      });

		    });
		  }


		  @override
		  Widget build(BuildContext context) {
		    return Scaffold(
		      appBar: AppBar(
		        title: Text("Lista de Tarefas"),
		        backgroundColor: Colors.blueAccent,
		        centerTitle: true,
		      ),  //AppBar
		      body: Column(
		        children: <Widget>[
		          Container(
		            padding: EdgeInsets.fromLTRB(17.0, 1.0, 7.0, 1.0),
		            child: Row(
		              children: <Widget>[
		                  Expanded(
		                    child: TextField(
		                        decoration: InputDecoration(
		                          labelText: "Nova Tarefa",
		                          labelStyle: TextStyle(color: Colors.blueAccent),
		                        ),
		                      controller: _toDoController,
		                    ),
		                  ),
		                  RaisedButton(
		                    color: Colors.blueAccent,
		                    child: Text("ADD"),
		                    textColor: Colors.white,
		                    onPressed: _addToDo,
		                  ),
		              ],
		            ),
		          ),
		          Expanded(
		            child: RefreshIndicator(
		                child: ListView.builder(
		                  padding: EdgeInsets.only(top: 10.0),
		                  itemCount: _toDoList.length,
		                  itemBuilder: buildItem,
		                ),
		                onRefresh: _refresh
		            )
		          )
		        ],
		      ),//Column
		    );  //Scaffold
		  }

		  Widget buildItem(BuildContext context, int index){
		      return Dismissible(
		        key: Key(DateTime.now().millisecondsSinceEpoch.toString()),
		        background: Container(
		          color:Colors.red,
		          child: Align(
		            alignment: Alignment(-0.9, 0.0),
		            child: Icon(Icons.delete, color: Colors.white,),
		          ),
		        ),
		        direction: DismissDirection.startToEnd,
		        child: CheckboxListTile(
		          title:Text(_toDoList[index]["title"]),
		          value: _toDoList[index]["ok"],
		          secondary: CircleAvatar(
		            child: Icon(_toDoList[index]["ok"] ?
		            Icons.check : Icons.error),
		          ),
		          onChanged: (c){
		            setState(() {
		              _toDoList[index]["ok"]=c;
		              _saveData();
		            });
		          },
		        ),
		        onDismissed: (direction){

		            _lastRemoved = Map.from(_toDoList[index]);
		            _lastRemovedPos = index;
		            _toDoList.removeAt(index);
		            setState(() {
		              _saveData();
		            });

		            final snack = SnackBar(
		              content:Text("Tarefa \"${_lastRemoved["title"]}\" removida !"),
		              action: SnackBarAction(
		                  label: "Desfazer",
		                  onPressed:(){
		                    _toDoList.insert(index, _lastRemoved);
		                    setState((){
		                      _saveData();
		                    });
		                  }),
		              duration: Duration(seconds: 3),
		            );
		          setState(() {
		            Scaffold.of(context).showSnackBar(snack);
		          });

		        },
		      );
		  }

		  Future<Null> _refresh() async{
		    await Future.delayed(Duration(seconds: 1));
		    _toDoList.sort(
		        (a,b){
		          if(a["ok"] && !b["ok"]){
		            return 1;
		          }else if(!a["ok"] && b["ok"]){
		            return -1;
		          }else {
		            return 0;
		          }
		        }
		    );

		    setState(() {
		      _saveData();
		    });

		    return null;
		  }

		  Future<File> _getFile() async {
		    final directory = await getApplicationDocumentsDirectory();
		    return File("${directory.path}/data.json");
		  }

		  Future<File> _saveData() async{
		    String data = json.encode(_toDoList);
		    final file = await _getFile();
		    return file.writeAsString(data);
		  }

		  Future<String> _readData() async{
		    try{
		      final file = await _getFile();

		      return file.readAsString();
		    }catch(e){
		      return null;
		    }
		  }

		}

Parte 7 - 

	import 'dart:convert';
	import 'dart:io';

	import 'package:flutter/material.dart';
	import 'package:path_provider/path_provider.dart';

	void main(){
	  runApp(MaterialApp(
	    home: home(),
	  ));
	}

	class home extends StatefulWidget {
	  @override
	  _homeState createState() => _homeState();
	}

	class _homeState extends State<home> {

	  List _toDoList = [];
	  final _toDoController = TextEditingController();
	  Map<String, dynamic> _lastRemoved;
	  int _lastRemovedPos;

	  void _addToDo(){
	    setState(() {
	      Map<String, dynamic> _newToDo = Map();
	      _newToDo["title"] = _toDoController.text;
	      _toDoController.text = "";
	      _newToDo["ok"] = false;
	      _toDoList.add(_newToDo);
	      _saveData();
	    });
	  }

	  @override
	  void initState() {
	    super.initState();
	    _readData().then((data){
	      setState(() {
	        _toDoList = json.decode(data);
	      });

	    });
	  }


	  @override
	  Widget build(BuildContext context) {
	    return Scaffold(
	      appBar: AppBar(
	        title: Text("Lista de Tarefas"),
	        backgroundColor: Colors.blueAccent,
	        centerTitle: true,
	      ),  //AppBar
	      body: Column(
	        children: <Widget>[
	          Container(
	            padding: EdgeInsets.fromLTRB(17.0, 1.0, 7.0, 1.0),
	            child: Row(
	              children: <Widget>[
	                  Expanded(
	                    child: TextField(
	                        decoration: InputDecoration(
	                          labelText: "Nova Tarefa",
	                          labelStyle: TextStyle(color: Colors.blueAccent),
	                        ),
	                      controller: _toDoController,
	                    ),
	                  ),
	                  RaisedButton(
	                    color: Colors.blueAccent,
	                    child: Text("ADD"),
	                    textColor: Colors.white,
	                    onPressed: _addToDo,
	                  ),
	              ],
	            ),
	          ),
	          Expanded(
	            child: RefreshIndicator(
	                child: ListView.builder(
	                  padding: EdgeInsets.only(top: 10.0),
	                  itemCount: _toDoList.length,
	                  itemBuilder: buildItem,
	                ),
	                onRefresh: _refresh
	            )
	          )
	        ],
	      ),//Column
	    );  //Scaffold
	  }

	  Widget buildItem(BuildContext context, int index){
	      return Dismissible(
	        key: Key(DateTime.now().millisecondsSinceEpoch.toString()),
	        background: Container(
	          color:Colors.red,
	          child: Align(
	            alignment: Alignment(-0.9, 0.0),
	            child: Icon(Icons.delete, color: Colors.white,),
	          ),
	        ),
	        direction: DismissDirection.startToEnd,
	        child: CheckboxListTile(
	          title:Text(_toDoList[index]["title"]),
	          value: _toDoList[index]["ok"],
	          secondary: CircleAvatar(
	            child: Icon(_toDoList[index]["ok"] ?
	            Icons.check : Icons.error),
	          ),
	          onChanged: (c){
	            setState(() {
	              _toDoList[index]["ok"]=c;
	              _saveData();
	            });
	          },
	        ),
	        onDismissed: (direction){

	            _lastRemoved = Map.from(_toDoList[index]);
	            _lastRemovedPos = index;
	            _toDoList.removeAt(index);
	            setState(() {
	              _saveData();
	            });

	            final snack = SnackBar(
	              content:Text("Tarefa \"${_lastRemoved["title"]}\" removida !"),
	              action: SnackBarAction(
	                  label: "Desfazer",
	                  onPressed:(){
	                    _toDoList.insert(index, _lastRemoved);
	                    setState((){
	                      _saveData();
	                    });
	                  }),
	              duration: Duration(seconds: 3),
	            );
	          setState(() {
	            Scaffold.of(context).showSnackBar(snack);
	          });

	        },
	      );
	  }

	  Future<Null> _refresh() async{
	    await Future.delayed(Duration(seconds: 1));
	    _toDoList.sort(
	        (a,b){
	          if(a["ok"] && !b["ok"]){
	            return 1;
	          }else if(!a["ok"] && b["ok"]){
	            return -1;
	          }else {
	            return 0;
	          }
	        }
	    );

	    setState(() {
	      _saveData();
	    });

	    return null;
	  }

	  Future<File> _getFile() async {
	    final directory = await getApplicationDocumentsDirectory();
	    return File("${directory.path}/data.json");
	  }

	  Future<File> _saveData() async{
	    String data = json.encode(_toDoList);
	    final file = await _getFile();
	    return file.writeAsString(data);
	  }

	  Future<String> _readData() async{
	    try{
	      final file = await _getFile();

	      return file.readAsString();
	    }catch(e){
	      return null;
	    }
	  }

	}
