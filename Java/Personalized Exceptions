-----------------------------------------------------------------------MAIN-----------------------------------------------------------------

public class MainPersonalizedExceptions {

	public static void main(String[] args){
		SimpleDateFormat sdf1 = new SimpleDateFormat("dd/MM/yyyy");
		Reservation rsv = null;
	try{	
		Date checkIn = sdf1.parse("24/09/2019");
		Date checkOut = sdf1.parse("26/09/2019");
		
		
		if(checkIn.before(checkOut)) {
			rsv = new Reservation(8521, checkIn, checkOut);
			System.out.println(rsv);
		}else {
			System.out.println("fail: erro1");
		}
		
		Date newCheckIn = sdf1.parse("30/09/2019");
		Date newCheckOut = sdf1.parse("29/09/2019");
		
		rsv.updateDates(newCheckIn, newCheckOut);
		
	}
	catch(ParseException e) {
		System.out.println("Invalid date format");
	}
	catch(IllegalArgumentException e) {
		System.out.println("Error in Reservation: "+e.getMessage());
	}
	finally {
		System.out.println(rsv);
	}
	
	}

}

-------------------------------------------------------------------------------RESERVATION--------------------------------------------------

public class Reservation {
	private Integer roomNumber;
	private Date checkin;
	private Date checkout;
	private static SimpleDateFormat sdf1 = new SimpleDateFormat("dd/MM/yyyy");
	public Reservation() {
		// TODO Auto-generated constructor stub
	}

	public Reservation(Integer roomNumber, Date checkin, Date checkout) {
		this.roomNumber = roomNumber;
		this.checkin = checkin;
		this.checkout = checkout;
	}

	public Integer getRoomNumber() {
		return roomNumber;
	}

	public void setRoomNumber(Integer roomNumber) {
		this.roomNumber = roomNumber;
	}

	public Date getCheckin() {
		return checkin;
	}


	public Date getCheckout() {
		return checkout;
	}

	public long duration() {
		long diff = checkout.getTime() - checkin.getTime();
		return TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
	}
	
	public void updateDates(Date checkin, Date checkout) {
		
		Date now = new Date();
		if(checkin.before(now) || checkout.before(now)) {
			throw new IllegalArgumentException("Reservation Dates for update must be future dates.");
		}else if(checkout.before(checkin)) {
			throw new IllegalArgumentException("Check-out date must be after check-in date.");
		}else {
			this.checkin = checkin;
			this.checkout = checkout;
		}	
	}

	@Override
	public String toString() {
		return "Reservation [Room = " + roomNumber + 
				", checkin = " + sdf1.format(checkin) + 
				", checkout = " + sdf1.format(checkout) +
				", "+duration()+" nights ]";                     
	}
	
	
}

